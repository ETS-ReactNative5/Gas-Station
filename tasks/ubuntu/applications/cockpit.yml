---
- name: Install Cockpit
  apt:
    name: "{{ item }}"
    state: present
  loop:
    - cockpit
    - cockpit-machines
- name: Install Cockpit Docker
  apt:
    deb: https://launchpad.net/ubuntu/+source/cockpit/215-1~ubuntu19.10.1/+build/18889196/+files/cockpit-docker_215-1~ubuntu19.10.1_all.deb
- name: Install 389 directory server if machine is the root host of Cockpit
  apt:
    name: "{{ item }}"
    state: present
  loop:
    - 389-ds
    - cockpit-389-ds
  when: ('cockpit' in (apps_installed | default([])))
- name: Add Cockpit configuration files if the target machine is the root host of Cockpit
  template:
    src: cockpit-machine.json.j2
    dest: "/etc/cockpit/machines.d/{{ item.name }}.json"
    owner: root
    group: root
    mode: "644"
  with_items: "{{ cockpit_instances }}"
  when: ('cockpit' in (apps_installed | default([])))
- name: Ensure libvirt-dbus is installed # From here and below maybe only necessary on Ubuntu 20.04
  apt:
    name: libvirt-dbus
    state: latest
- name: Apply usermod -a -G libvirt libvirtdbus
  shell: usermod -a -G libvirt libvirtdbus
- name: Apply usermod -a -G libvirt libvirt-qemu
  shell: usermod -a -G libvirt libvirt-qemu
- name: Check if a restart for the Cockpit Machines patch is required
  stat:
    path: "/home/{{ ansible_user }}/.config/.cockpit_machines_reboot"
  register: cockpit_rebooted
- name: Ensure user .config folder exists
  file:
    path: "/home/{{ ansible_user }}/.config"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "700"
- name: Track the pending reboot by creating a file in ~/.config
  file:
    path: "/home/{{ ansible_user }}/.config/.cockpit_machines_reboot"
    state: touch
  when: not cockpit_rebooted.stat.exists
- name: Reboot the system, if required
  reboot:
    reboot_timeout: 300
  when:
    - not cockpit_rebooted.stat.exists
    - ansible_connection != 'local'