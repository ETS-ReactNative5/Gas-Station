---
- name: Create Docker system group
  group:
    name: docker
    state: present
    system: yes
- name: Add user to the Docker system group
  user:
    name: "{{ ansible_user }}"
    groups:
      - docker
    append: yes
- name: Check if docker-ca.pem exists in /etc/ssl/private
  stat:
    path: /etc/ssl/private/docker-ca.pem
  register: docker_ca_pem
- name: Determine whether or not the Docker certificates should be generated
  set_fact:
    generate_docker_certificates: "{{ (not docker_ca_pem.stat.exists) or (docker_regenerate_certificates | default(false)) }}"
- name: Create a Docker password file for the TLS certificates
  become: yes
  become_user: "{{ ansible_user }}"
  copy:
    content: "{{ lookup('password', '/dev/null length=50 chars=ascii_letters') }}"
    dest: ~/.docker/.cert-password
    force: no
  when: generate_docker_certificates
- name: Generate Docker certificates
  become: yes
  become_user: "{{ ansible_user }}"
  shell: |
    export HOST=workstation.lab.megabyte.space
    mkdir -pv ~/.docker
    cd ~/.docker
    openssl genrsa -aes256 -passout file:~/.docker/.cert-password -out docker-ca-key.pem 4096
    openssl req -new -passin file:~/.docker/.cert-password -subj '/C=US/ST=New Jersey/L=The Hood/O=Megabyte LLC/OU=Home Lab/CN=$HOST' -x509 -days 365 -key docker-ca-key.pem -sha256 -out docker-ca.pem
    openssl genrsa -out docker-server-key.pem 4096
    openssl req -subj "/CN=$HOST" -sha256 -new -key docker-server-key.pem -out docker-server.csr
    echo subjectAltName = DNS:$HOST,IP:10.14.14.14,IP:127.0.0.1 >> extfile.cnf
    echo extendedKeyUsage = serverAuth >> extfile.cnf
    openssl x509 -req -days 365 -sha256 -in docker-server.csr -CA docker-ca.pem -CAkey docker-ca-key.pem -passin file:~/.docker/.cert-password -CAcreateserial -out docker-server-cert.pem -extfile extfile.cnf
    openssl genrsa -out docker-key.pem 4096
    openssl req -subj '/CN=client' -new -key docker-key.pem -out docker-client.csr
    echo extendedKeyUsage = clientAuth > extfile-client.cnf
    openssl x509 -req -days 365 -sha256 -in docker-client.csr -CA docker-ca.pem -CAkey docker-ca-key.pem -passin file:~/.docker/.cert-password -CAcreateserial -out docker-cert.pem -extfile extfile-client.cnf
    rm -v docker-client.csr docker-server.csr extfile.cnf extfile-client.cnf
    chmod -v 0400 docker-ca-key.pem docker-key.pem docker-server-key.pem
    chmod -v 0444 docker-ca.pem docker-server-cert.pem docker-cert.pem
  when: generate_docker_certificates
- name: Move Docker server certificates to protected SSL folder
  command: "mv /home/{{ ansible_user }}/.docker/{{ item }} /etc/ssl/private/{{ item }} && chown root:root /etc/ssl/private/{{ item }}"
  with_items:
    - docker-server-cert.pem
    - docker-server-key.pem
    - docker-ca-key.pem
  when: generate_docker_certificates
- name: Copy docker-ca.pem to protected SSL folder
  command: "cp /home/{{ ansible_user }}/.docker/docker-ca.pem /etc/ssl/private/docker-ca.pem && chown root:root /etc/ssl/private/docker-ca.pem"
  when: generate_docker_certificates
- name: Allow TCP connections to Docker
  become: yes
  lineinfile:
    path: /etc/systemd/system/snap.docker.dockerd.service
    regex: "ExecStart="
    line: ExecStart=/usr/bin/snap run docker.dockerd --listen addr=tcp://0.0.0.0:2424,tlsverify=true,tlscacert=/etc/ssl/private/docker-ca.pem,tlscert=/etc/ssl/private/docker-server-cert.pem,tlskey=/etc/ssl/private/docker-server-key.pem --listen addr=unix:///var/run/docker.sock,tlsverify=false
  when: not ('portainer' in (apps_installed | default([])))
- name: Restart the Docker service
  systemd:
    daemon_reload: yes
    name: "snap.docker.dockerd"
    state: restarted
- name: Check if Docker triggered a restart
  stat:
    path: "/home/{{ ansible_user }}/.config/.docker_rebooted"
  register: docker_restarted
- name: Ensure user .config folder exists
  file:
    path: "/home/{{ ansible_user }}/.config"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "700"
- name: Create file for tracking if Docker triggered a restart
  file:
    path: "/home/{{ ansible_user }}/.config/.docker_rebooted"
    state: touch
  when: not docker_restarted.stat.exists
- name: Reboot the system, if required
  reboot:
    reboot_timeout: 600
  when:
    - not docker_restarted.stat.exists
    - ansible_connection != 'local'
