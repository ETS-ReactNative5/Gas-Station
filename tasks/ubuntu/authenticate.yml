---
- name: Ensure openssh-server is installed
  become: yes
  apt:
    name: openssh-server
    state: latest

- name: "Ensure {{ ansible_user }}'s .ssh directory exists"
  file: 
    dest: ~/.ssh
    mode: "700"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    state: directory

- name: Ensure root's .ssh directory exists
  become: yes
  file:
    path: ~/.ssh
    mode: "700"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    state: directory

- name: Set authorized key
  authorized_key:
    user: "{{ ansible_user }}"
    state: present
    key: "{{ lookup('file', 'files/keys/{{ authorized_key_file }}') }}"
  when: authorized_key_file is defined

- name: Copy SSH private keys
  copy:
    src: "files/keys/{{ item }}"
    dest: "~/.ssh/{{ item }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "600"
  with_items: "{{ ssh_private_keys | default([]) }}"

- name: Copy SSH private keys (for root)
  become: yes
  copy:
    src: "files/keys/{{ item }}"
    dest: "~/.ssh/{{ item }}"
    owner: root
    group: root
    mode: "600"
  with_items: "{{ ssh_private_keys | default([]) }}"

- name: Copy SSH public keys
  copy:
    src: "files/keys/{{ item }}.pub"
    dest: "~/.ssh/{{ item }}.pub"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "644"
  with_items: "{{ ssh_private_keys | default([]) }}"

- name: Copy SSH public keys (for root)
  become: yes
  copy:
    src: "files/keys/{{ item }}.pub"
    dest: "~/.ssh/{{ item }}.pub"
    owner: root
    group: root
    mode: "644"
  with_items: "{{ ssh_private_keys | default([]) }}"

- name: Copy SSH known_hosts
  copy:
    src: files/keys/known_hosts
    dest: ~/.ssh/known_hosts
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "644"

- name: Copy SSH known_hosts (for root)
  become: yes
  copy:
    src: files/keys/known_hosts
    dest: ~/.ssh/known_hosts
    owner: root
    group: root
    mode: "644"

- name: Set the ssh_hosts variable
  set_fact:
    ssh_hosts: "{{ hosts | map('extract', hosts) | flatten | selectattr('hostname', 'defined') | list }}"

- name: Generate SSH config file
  template:
    src: templates/ssh-config.j2
    dest: ~/.ssh/config
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "644"

- name: Copy config file to root user's .ssh folder
  become: yes
  copy:
    src: "/home/{{ ansible_user }}/.ssh/config"
    dest: ~/.ssh/config
    owner: root
    group: root
    mode: "644"
    remote_src: yes

- name: Scan server SSH keys using ssh-keyscan
  command: "ssh-keyscan -p {{ security_ssh_port }} -t ecdsa {{ item.ip_address }}"
  ignore_errors: yes
  register: known_host_keys
  with_items: "{{ ssh_hosts }}"

- name: Add server SSH keys to known_hosts
  known_hosts:
    name: "[{{ item.item.ip_address }}]:2214"
    key: "{{ item.stdout }}"
    path: ~/.ssh/known_hosts
  ignore_errors: yes
  when:
    - item.item.ip_address is defined
    - item.stdout is defined
    - item.rc != 1
  with_items: "{{ known_host_keys.results }}"

- name: Copy known_hosts to root's .ssh folder
  become: yes
  copy:
    src: "/home/{{ ansible_user }}/.ssh/known_hosts"
    dest: ~/.ssh/known_hosts
    owner: root
    group: root
    mode: "644"
    remote_src: yes

- name: Ensure Playbooks git repository is updated
  command: "git remote set-url origin {{ playbooks_source_repository }}"
  args:
    chdir: "~/Playbooks"
  when: ansible_connection == 'local'
