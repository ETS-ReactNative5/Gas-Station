---
- name: Ensure Megabyte Labs configuration directory exists
  ansible.windows.win_file:
    path: "{{ item }}"
    state: directory
  loop:
    - '%USERPROFILE%\.config'
    - '%USERPROFILE%\.config\megabytelabs'

- name: "Check if {{ app_name }} has configuration stored in '%USERPROFILE%/.config/megabytelabs/s5cmd'"
  ansible.windows.win_stat:
    path: '%USERPROFILE%\.config\megabytelabs\s5cmd'
  register: s5cmd_config

- name: "Detect previously installed {{ app_name }} version"
  ansible.windows.win_command: type s5cmd
  args:
    chdir: '%USERPROFILE%\.config\megabytelabs'
  changed_when: false
  register: current_s5cmd_version
  when: s5cmd_config.stat.exists

- name: "Determine whether or not the latest version of {{ app_name }} is already installed"
  set_fact:
    install_s5cmd: "{{ (current_s5cmd_version.skipped | default(false)) or \
      ((not current_s5cmd_version.skipped | default(false)) and (current_s5cmd_version.stdout != s5cmd_latest_release_tag.json.tag_name | replace('v',''))) }}"

- name: "Ensure older version of {{ app_name }} is uninstalled"
  ansible.windows.win_file:
    path: "{{ ansible_env.GOROOT }}/bin/s5cmd"
    state: absent
  when: install_s5cmd

- name: "Ensure {{ app_name }} is installed"
  ansible.windows.win_command: go get github.com/peak/s5cmd
  args:
    creates: "{{ ansible_env.GOROOT }}/bin/s5cmd"
  when: install_s5cmd

- name: "Save meta information about the version of {{ app_name }} that was installed"
  ansible.windows.win_copy:
    dest: '%USERPROFILE%\.config\megabytelabs\s5cmd'
    content: |
      {{ s5cmd_latest_release_tag.json.tag_name | replace('v','') }}
  when: install_s5cmd
