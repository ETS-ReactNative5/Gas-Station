---
- name: Include variables based on the operating system
  include_vars: "{{ ansible_os_family }}.yml"

# @action Ensures Local System is configured
# Ensure correct repository setting is configured
# @action Ensures Local System is configured
# Removes vault_pass file and autostart .desktop file used for configuration of the master host
# @action Ensures Local System is configured
# Installs necessary Python packages on the master host
- name: Include tasks based on the operating system
  include_tasks: "local-{{ ansible_os_family }}.yml"
  when: ansible_connection == 'local'

# @action Ensures common configuration settings are applied
# Installs common software packages
# @action Ensures common configuration settings are applied
# Install Git
# @action Ensures common configuration settings are applied
# Removes unnecessary bloatware
# @action Ensures common configuration settings are applied
# Sets the correct hostname
# @action Ensures common configuration settings are applied
# Installs OS updates and reboots Windows system if necessary
- name: Include tasks based on the operating system
  become: true
  become_method: "{{ 'runas' if ansible_os_family == 'Windows' else 'sudo' }}"
  become_user: "{{ ansible_user if ansible_os_family == 'Windows' else omit }}"
  block:
    - include_tasks: "setup-{{ ansible_os_family }}.yml"

# @action Ensures user configurations are applied
# Creates necessary Groups
# @action Ensures user configurations are applied
# Ensures Users belong to configured Groups
# @action Ensures user configurations are applied
# Configures tinypng-cil key
- name: Run the configuration setup for each user
  include_tasks: user-continue.yml
  loop: "{{ user_configs | default([]) }}"
  loop_control:
    label: "{{ user.username }}"
    loop_var: user

- name: Ensure user 'ubuntu' is removed if present
  become: true
  block:
    - name: "Create new user account for {{ ansible_user_new }}"
      become_user: root
      user:
        name: "{{ ansible_user_new }}"
        state: present
        password: "{{ ansible_password | password_hash('sha512', 'mysecretsalt') }}"
    - name: "Add the user {{ ansible_user_new }} to passwordless sudoers"
      lineinfile:
        dest: /etc/sudoers
        regexp: "^{{ ansible_user_new }}"
        line: "{{ ansible_user_new }} ALL=(ALL) NOPASSWD: ALL"
        state: present
        validate: "visudo -cf %s"
        mode: 0644
    - name: Set fact to use the newly created user for connections
      set_fact:
        ansible_user: "{{ ansible_user_new }}"
    - wait_for_connection:
        timeout: 10
    - name: Kill processes owned by ubuntu user # noqa 301
      command: "pkill -u ubuntu"
      ignore_errors: true
    - name: Remove old user
      user:
        name: ubuntu
        state: absent
        remove: true
  when: can_connect_as_ubuntu is defined and not can_connect_as_ubuntu.failed
