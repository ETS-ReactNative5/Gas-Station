---
- name: Create temporary directory
  ansible.windows.win_file:
    path: "{{ workstation_tempdir }}"
    state: directory

- name: Check for pre-downloaded binary
  ansible.windows.win_stat:
    path: "{{ workstation_tempdir }}\tryworkstation-win-64.exe"
  register: file_stats

- name: Download workstation
  ansible.windows.win_get_url:
    url: "{{ workstation_download_url }}"
    dest: "{{ workstation_tempdir }}\tryworkstation-win-64.exe"
  when: not file_stats.stat.exists

- name: Run installer
  become: true
  ansible.windows.win_package:
    path: "{{ workstation_tempdir }}\tryworkstation-win-64.exe"
    arguments:
      - /s
      - "/v\"/qn EULAS_AGREED=1 {{ 'SERIALNUMBER=' + workstation_license if workstation_license is defined else '' }} AUTOSOFTWAREUPDATE=1\""

- name: Check if Unlocker archive is present
  ansible.builtin.stat:
    path: "{{ workstation_tempdir }}\unlocker-{{ unlocker_git.split('/')[-2] }}.zip"
  register: unlocker_stat

- name: Download Unlocker archive (for running Mac OS X on VMWare)
  ansible.windows.win_get_url:
    url: "{{ unlocker_git }}"
    dest: "{{ workstation_tempdir }}\unlocker-{{ unlocker_git.split('/')[-2] }}.zip"
  when: not unlocker_stat.stat.exists

- name: Extract the Unlocker archive
  community.windows.win_unzip:
    src: "{{ workstation_tempdir }}\unlocker-{{ unlocker_git.split('/')[-2] }}.zip"
    dest: "{{ workstation_tempdir }}\unlocker"
    creates: "{{ workstation_tempdir }}\unlocker"
  when: not unlocker_stat.stat.exists

- name: Patch VMWare for Mac OS X
  become: true
  become_method: runas
  ansible.windows.win_command: cmd.exe /c win-install.cmd
  args:
    chdir: "{{ workstation_tempdir }}\unlocker"
    creates: "{{ workstation_tempdir }}\unlocker\backup"
  when: not unlocker_stat.stat.exists
