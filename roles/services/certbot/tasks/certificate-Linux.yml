---
- name: Check if certificate already exists
  stat:
    path: /etc/letsencrypt/live/{{ certificate.domains | first | replace('*.', '') }}/cert.pem
  register: letsencrypt_cert

- name: Populate service facts
  service_facts:
  when: ansible_system == 'Linux'

- name: Stop services to allow certbot to generate a certificate
  service:
    name: "{{ item }}"
    state: stopped
  loop: "{{ certbot_create_standalone_stop_services }}"
  when:
    - not letsencrypt_cert.stat.exists
    - "('{{ item }}' in services) or ('{{ item }}.service' in services)"
    - ansible_system == 'Linux'
# @action This only worked when I ran the command it generated from the terminal with sudo
# @logs -
# /usr/local/bin/certbot certonly --noninteractive --dns-cloudflare --agree-tos --email brian@enviedsolutions.com --dns-cloudflare-propagation-seconds 14 -d *.megabyte.space,*.home.megabyte.space,*.lab.megabyte.space
# The following error was encountered:
# [Errno 13] Permission denied: '/var/log/letsencrypt/.certbot.lock'
# Either run as root, or set --config-dir, --work-dir, and --logs-dir to writeable paths.
# sudo /usr/local/bin/certbot certonly --noninteractive --dns-cloudflare --agree-tos --email brian@enviedsolutions.com --dns-cloudflare-propagation-seconds 14 -d *.megabyte.space,*.home.megabyte.space,*.lab.megabyte.space
# [sudo] password for hawkwood:
# Saving debug log to /var/log/letsencrypt/letsencrypt.log
# Requesting a certificate for *.megabyte.space and 2 more domains
# Waiting 14 seconds for DNS changes to propagate

# Successfully received certificate.
# Certificate is saved at: /etc/letsencrypt/live/megabyte.space/fullchain.pem
# Key is saved at:         /etc/letsencrypt/live/megabyte.space/privkey.pem
# This certificate expires on 2022-03-05.
# These files will be updated when the certificate renews.
- name: Generate new certificate if one doesn't exist
  become_user: root
  command: "{{ certbot_create_command }}"
  when: not letsencrypt_cert.stat.exists

- name: Start services after cert has been generated
  service:
    name: "{{ item }}"
    state: started
  loop: "{{ certbot_create_standalone_stop_services }}"
  when:
    - not letsencrypt_cert.stat.exists
    - "('{{ item }}' in services) or ('{{ item }}.service' in services)"
    - ansible_system == 'Linux'
